// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.dra11y.flutter.native_tab_bar

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/**
 * A tab item that includes the title label and native icon data.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NativeTab (
  val title: String? = null,
  val nativeTabIcon: NativeTabIconData? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeTab {
      val title = list[0] as? String
      val nativeTabIcon: NativeTabIconData? = (list[1] as? List<Any?>)?.let {
        NativeTabIconData.fromList(it)
      }
      return NativeTab(title, nativeTabIcon)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
      nativeTabIcon?.toList(),
    )
  }
}

/**
 * A color formatted for the API to pass between Flutter and native code.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class RGBAColor (
  val red: Double? = null,
  val green: Double? = null,
  val blue: Double? = null,
  val alpha: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RGBAColor {
      val red = list[0] as? Double
      val green = list[1] as? Double
      val blue = list[2] as? Double
      val alpha = list[3] as? Double
      return RGBAColor(red, green, blue, alpha)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      red,
      green,
      blue,
      alpha,
    )
  }
}

/**
 * Data for an icon for the API to pass between Flutter and native code.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NativeTabIconData (
  val codePoint: Long? = null,
  val fontFamily: String? = null,
  val selectedCodePoint: Long? = null,
  val selectedFontFamily: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeTabIconData {
      val codePoint = list[0].let { if (it is Int) it.toLong() else it as? Long }
      val fontFamily = list[1] as? String
      val selectedCodePoint = list[2].let { if (it is Int) it.toLong() else it as? Long }
      val selectedFontFamily = list[3] as? String
      return NativeTabIconData(codePoint, fontFamily, selectedCodePoint, selectedFontFamily)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      codePoint,
      fontFamily,
      selectedCodePoint,
      selectedFontFamily,
    )
  }
}

/**
 * The style of the NativeTabBar.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NativeTabBarApiStyle (
  val isDarkTheme: Boolean? = null,
  /**
   * Whether Material 3 is active on Android, which affects the tab bar height.
   * Defaults to `true`. Does not affect iOS.
   */
  val isMaterial3: Boolean? = null,
  /** The primary color of an unselected tab item. */
  val itemColor: RGBAColor? = null,
  /** The primary color of the currently selected tab item. */
  val selectedItemColor: RGBAColor? = null,
  /** The background color of the tab bar in light mode. */
  val backgroundColor: RGBAColor? = null,
  /** The background color of the tab bar in dark mode. */
  val backgroundColorDark: RGBAColor? = null,
  /** In Material 3 (Android only), the "pill" color of the selected tab. */
  val materialIndicatorBackgroundColor: RGBAColor? = null,
  /**
   * In Material 3 (Android only), the color of the icon of the selected tab.
   * This icon overlays the pill and defaults to either white or black,
   * depending on the calculated lightness of the pill color.
   */
  val materialIndicatorForegroundColor: RGBAColor? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeTabBarApiStyle {
      val isDarkTheme = list[0] as? Boolean
      val isMaterial3 = list[1] as? Boolean
      val itemColor: RGBAColor? = (list[2] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val selectedItemColor: RGBAColor? = (list[3] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val backgroundColor: RGBAColor? = (list[4] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val backgroundColorDark: RGBAColor? = (list[5] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val materialIndicatorBackgroundColor: RGBAColor? = (list[6] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val materialIndicatorForegroundColor: RGBAColor? = (list[7] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      return NativeTabBarApiStyle(isDarkTheme, isMaterial3, itemColor, selectedItemColor, backgroundColor, backgroundColorDark, materialIndicatorBackgroundColor, materialIndicatorForegroundColor)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isDarkTheme,
      isMaterial3,
      itemColor?.toList(),
      selectedItemColor?.toList(),
      backgroundColor?.toList(),
      backgroundColorDark?.toList(),
      materialIndicatorBackgroundColor?.toList(),
      materialIndicatorForegroundColor?.toList(),
    )
  }
}
/**
 * A callback API for native code to call Flutter code.
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class NativeTabBarFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeTabBarFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  /** Called when the native platform view renders and knows its intrinsic content height. */
  fun wantsHeight(idArg: String, heightArg: Double, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight", codec)
    channel.send(listOf(idArg, heightArg)) {
      callback()
    }
  }
  /** Called by the native platform when the user taps a tab. */
  fun valueChanged(idArg: String, selectedIndexArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged", codec)
    channel.send(listOf(idArg, selectedIndexArg)) {
      callback()
    }
  }
  /** Called when the platform code needs the widget state to invalidate and recreate the native view. */
  fun refresh(idArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarFlutterApi.refresh", codec)
    channel.send(listOf(idArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeTabBarHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeTab.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeTabBarApiStyle.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeTabIconData.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RGBAColor.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeTab -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeTabBarApiStyle -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeTabIconData -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is RGBAColor -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * API for our Flutter code to pass data and call methods in native code.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NativeTabBarHostApi {
  /** Called from Flutter to send the tabs to the native platform code. */
  fun setTabs(id: String, tabs: List<NativeTab>, selectedIndex: Long?): Boolean
  /** Called from Flutter to pass the style to the native code. */
  fun setStyle(id: String, style: NativeTabBarApiStyle): Boolean
  /** Called from Flutter to tell the native code to select the given tab. */
  fun setSelected(id: String, index: Long?): Boolean

  companion object {
    /** The codec used by NativeTabBarHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeTabBarHostApiCodec
    }
    /** Sets up an instance of `NativeTabBarHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeTabBarHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarHostApi.setTabs", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val tabsArg = args[1] as List<NativeTab>
              val selectedIndexArg = args[2].let { if (it is Int) it.toLong() else it as? Long }
              wrapped = listOf<Any?>(api.setTabs(idArg, tabsArg, selectedIndexArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarHostApi.setStyle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val styleArg = args[1] as NativeTabBarApiStyle
              wrapped = listOf<Any?>(api.setStyle(idArg, styleArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeTabBarHostApi.setSelected", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val indexArg = args[1].let { if (it is Int) it.toLong() else it as? Long }
              wrapped = listOf<Any?>(api.setSelected(idArg, indexArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
