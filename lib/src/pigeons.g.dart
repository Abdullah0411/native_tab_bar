// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// A tab item that includes the title label and native icon data.
class NativeTab {
  NativeTab({
    this.title,
    this.nativeTabIcon,
  });

  String? title;

  NativeTabIconData? nativeTabIcon;

  Object encode() {
    return <Object?>[
      title,
      nativeTabIcon?.encode(),
    ];
  }

  static NativeTab decode(Object result) {
    result as List<Object?>;
    return NativeTab(
      title: result[0] as String?,
      nativeTabIcon: result[1] != null
          ? NativeTabIconData.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

/// A color formatted for the API to pass between Flutter and native code.
class RGBAColor {
  RGBAColor({
    this.red,
    this.green,
    this.blue,
    this.alpha,
  });

  double? red;

  double? green;

  double? blue;

  double? alpha;

  Object encode() {
    return <Object?>[
      red,
      green,
      blue,
      alpha,
    ];
  }

  static RGBAColor decode(Object result) {
    result as List<Object?>;
    return RGBAColor(
      red: result[0] as double?,
      green: result[1] as double?,
      blue: result[2] as double?,
      alpha: result[3] as double?,
    );
  }
}

/// Data for an icon for the API to pass between Flutter and native code.
class NativeTabIconData {
  NativeTabIconData({
    this.codePoint,
    this.fontFamily,
    this.selectedCodePoint,
    this.selectedFontFamily,
  });

  int? codePoint;

  String? fontFamily;

  int? selectedCodePoint;

  String? selectedFontFamily;

  Object encode() {
    return <Object?>[
      codePoint,
      fontFamily,
      selectedCodePoint,
      selectedFontFamily,
    ];
  }

  static NativeTabIconData decode(Object result) {
    result as List<Object?>;
    return NativeTabIconData(
      codePoint: result[0] as int?,
      fontFamily: result[1] as String?,
      selectedCodePoint: result[2] as int?,
      selectedFontFamily: result[3] as String?,
    );
  }
}

/// The style of the NativeTabBar.
class NativeTabBarApiStyle {
  NativeTabBarApiStyle({
    this.isDarkTheme,
    this.isMaterial3,
    this.itemColor,
    this.selectedItemColor,
    this.backgroundColor,
    this.backgroundColorDark,
    this.materialIndicatorBackgroundColor,
    this.materialIndicatorForegroundColor,
  });

  bool? isDarkTheme;

  /// Whether Material 3 is active on Android, which affects the tab bar height.
  /// Defaults to `true`. Does not affect iOS.
  bool? isMaterial3;

  /// The primary color of an unselected tab item.
  RGBAColor? itemColor;

  /// The primary color of the currently selected tab item.
  RGBAColor? selectedItemColor;

  /// The background color of the tab bar in light mode.
  RGBAColor? backgroundColor;

  /// The background color of the tab bar in dark mode.
  RGBAColor? backgroundColorDark;

  /// In Material 3 (Android only), the "pill" color of the selected tab.
  RGBAColor? materialIndicatorBackgroundColor;

  /// In Material 3 (Android only), the color of the icon of the selected tab.
  /// This icon overlays the pill and defaults to either white or black,
  /// depending on the calculated lightness of the pill color.
  RGBAColor? materialIndicatorForegroundColor;

  Object encode() {
    return <Object?>[
      isDarkTheme,
      isMaterial3,
      itemColor?.encode(),
      selectedItemColor?.encode(),
      backgroundColor?.encode(),
      backgroundColorDark?.encode(),
      materialIndicatorBackgroundColor?.encode(),
      materialIndicatorForegroundColor?.encode(),
    ];
  }

  static NativeTabBarApiStyle decode(Object result) {
    result as List<Object?>;
    return NativeTabBarApiStyle(
      isDarkTheme: result[0] as bool?,
      isMaterial3: result[1] as bool?,
      itemColor: result[2] != null
          ? RGBAColor.decode(result[2]! as List<Object?>)
          : null,
      selectedItemColor: result[3] != null
          ? RGBAColor.decode(result[3]! as List<Object?>)
          : null,
      backgroundColor: result[4] != null
          ? RGBAColor.decode(result[4]! as List<Object?>)
          : null,
      backgroundColorDark: result[5] != null
          ? RGBAColor.decode(result[5]! as List<Object?>)
          : null,
      materialIndicatorBackgroundColor: result[6] != null
          ? RGBAColor.decode(result[6]! as List<Object?>)
          : null,
      materialIndicatorForegroundColor: result[7] != null
          ? RGBAColor.decode(result[7]! as List<Object?>)
          : null,
    );
  }
}

/// A callback API for native code to call Flutter code.
abstract class NativeTabBarFlutterApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// Called when the native platform view renders and knows its intrinsic content height.
  void wantsHeight(String id, double height);

  /// Called by the native platform when the user taps a tab.
  void valueChanged(String id, int selectedIndex);

  /// Called when the platform code needs the widget state to invalidate and recreate the native view.
  void refresh(String id);

  static void setup(NativeTabBarFlutterApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight was null, expected non-null String.');
          final double? arg_height = (args[1] as double?);
          assert(arg_height != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight was null, expected non-null double.');
          api.wantsHeight(arg_id!, arg_height!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged was null, expected non-null String.');
          final int? arg_selectedIndex = (args[1] as int?);
          assert(arg_selectedIndex != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged was null, expected non-null int.');
          api.valueChanged(arg_id!, arg_selectedIndex!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeTabBarFlutterApi.refresh', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.refresh was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeTabBarFlutterApi.refresh was null, expected non-null String.');
          api.refresh(arg_id!);
          return;
        });
      }
    }
  }
}

class _NativeTabBarHostApiCodec extends StandardMessageCodec {
  const _NativeTabBarHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeTab) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeTabBarApiStyle) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeTabIconData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is RGBAColor) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return NativeTab.decode(readValue(buffer)!);
      case 129:
        return NativeTabBarApiStyle.decode(readValue(buffer)!);
      case 130:
        return NativeTabIconData.decode(readValue(buffer)!);
      case 131:
        return RGBAColor.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// API for our Flutter code to pass data and call methods in native code.
class NativeTabBarHostApi {
  /// Constructor for [NativeTabBarHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeTabBarHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeTabBarHostApiCodec();

  /// Called from Flutter to send the tabs to the native platform code.
  Future<bool> setTabs(
      String arg_id, List<NativeTab?> arg_tabs, int? arg_selectedIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeTabBarHostApi.setTabs', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_id, arg_tabs, arg_selectedIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// Called from Flutter to pass the style to the native code.
  Future<bool> setStyle(String arg_id, NativeTabBarApiStyle arg_style) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeTabBarHostApi.setStyle', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_style]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// Called from Flutter to tell the native code to select the given tab.
  Future<bool> setSelected(String arg_id, int? arg_index) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeTabBarHostApi.setSelected', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}
