// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// A tab item that includes the title label and native icon data.
///
/// Generated class from Pigeon that represents data sent in messages.
struct NativeTab {
  var title: String? = nil
  var nativeTabIcon: NativeTabIconData? = nil

  static func fromList(_ list: [Any?]) -> NativeTab? {
    let title = list[0] as? String 
    var nativeTabIcon: NativeTabIconData? = nil
    if let nativeTabIconList = list[1] as? [Any?] {
      nativeTabIcon = NativeTabIconData.fromList(nativeTabIconList)
    }

    return NativeTab(
      title: title,
      nativeTabIcon: nativeTabIcon
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      nativeTabIcon?.toList(),
    ]
  }
}

/// A color formatted for the API to pass between Flutter and native code.
///
/// Generated class from Pigeon that represents data sent in messages.
struct RGBAColor {
  var red: Double? = nil
  var green: Double? = nil
  var blue: Double? = nil
  var alpha: Double? = nil

  static func fromList(_ list: [Any?]) -> RGBAColor? {
    let red = list[0] as? Double 
    let green = list[1] as? Double 
    let blue = list[2] as? Double 
    let alpha = list[3] as? Double 

    return RGBAColor(
      red: red,
      green: green,
      blue: blue,
      alpha: alpha
    )
  }
  func toList() -> [Any?] {
    return [
      red,
      green,
      blue,
      alpha,
    ]
  }
}

/// Data for an icon for the API to pass between Flutter and native code.
///
/// Generated class from Pigeon that represents data sent in messages.
struct NativeTabIconData {
  var codePoint: Int32? = nil
  var fontFamily: String? = nil
  var selectedCodePoint: Int32? = nil
  var selectedFontFamily: String? = nil

  static func fromList(_ list: [Any?]) -> NativeTabIconData? {
    let codePoint = list[0] as? Int32 
    let fontFamily = list[1] as? String 
    let selectedCodePoint = list[2] as? Int32 
    let selectedFontFamily = list[3] as? String 

    return NativeTabIconData(
      codePoint: codePoint,
      fontFamily: fontFamily,
      selectedCodePoint: selectedCodePoint,
      selectedFontFamily: selectedFontFamily
    )
  }
  func toList() -> [Any?] {
    return [
      codePoint,
      fontFamily,
      selectedCodePoint,
      selectedFontFamily,
    ]
  }
}

/// The style of the NativeTabBar.
///
/// Generated class from Pigeon that represents data sent in messages.
struct NativeTabBarApiStyle {
  var isDarkTheme: Bool? = nil
  /// Whether Material 3 is active on Android, which affects the tab bar height.
  /// Defaults to `true`. Does not affect iOS.
  var isMaterial3: Bool? = nil
  /// The primary color of an unselected tab item.
  var itemColor: RGBAColor? = nil
  /// The primary color of the currently selected tab item.
  var selectedItemColor: RGBAColor? = nil
  /// The background color of the tab bar in light mode.
  var backgroundColor: RGBAColor? = nil
  /// The background color of the tab bar in dark mode.
  var backgroundColorDark: RGBAColor? = nil
  /// In Material 3 (Android only), the "pill" color of the selected tab.
  var materialIndicatorBackgroundColor: RGBAColor? = nil
  /// In Material 3 (Android only), the color of the icon of the selected tab.
  /// This icon overlays the pill and defaults to either white or black,
  /// depending on the calculated lightness of the pill color.
  var materialIndicatorForegroundColor: RGBAColor? = nil

  static func fromList(_ list: [Any?]) -> NativeTabBarApiStyle? {
    let isDarkTheme = list[0] as? Bool 
    let isMaterial3 = list[1] as? Bool 
    var itemColor: RGBAColor? = nil
    if let itemColorList = list[2] as? [Any?] {
      itemColor = RGBAColor.fromList(itemColorList)
    }
    var selectedItemColor: RGBAColor? = nil
    if let selectedItemColorList = list[3] as? [Any?] {
      selectedItemColor = RGBAColor.fromList(selectedItemColorList)
    }
    var backgroundColor: RGBAColor? = nil
    if let backgroundColorList = list[4] as? [Any?] {
      backgroundColor = RGBAColor.fromList(backgroundColorList)
    }
    var backgroundColorDark: RGBAColor? = nil
    if let backgroundColorDarkList = list[5] as? [Any?] {
      backgroundColorDark = RGBAColor.fromList(backgroundColorDarkList)
    }
    var materialIndicatorBackgroundColor: RGBAColor? = nil
    if let materialIndicatorBackgroundColorList = list[6] as? [Any?] {
      materialIndicatorBackgroundColor = RGBAColor.fromList(materialIndicatorBackgroundColorList)
    }
    var materialIndicatorForegroundColor: RGBAColor? = nil
    if let materialIndicatorForegroundColorList = list[7] as? [Any?] {
      materialIndicatorForegroundColor = RGBAColor.fromList(materialIndicatorForegroundColorList)
    }

    return NativeTabBarApiStyle(
      isDarkTheme: isDarkTheme,
      isMaterial3: isMaterial3,
      itemColor: itemColor,
      selectedItemColor: selectedItemColor,
      backgroundColor: backgroundColor,
      backgroundColorDark: backgroundColorDark,
      materialIndicatorBackgroundColor: materialIndicatorBackgroundColor,
      materialIndicatorForegroundColor: materialIndicatorForegroundColor
    )
  }
  func toList() -> [Any?] {
    return [
      isDarkTheme,
      isMaterial3,
      itemColor?.toList(),
      selectedItemColor?.toList(),
      backgroundColor?.toList(),
      backgroundColorDark?.toList(),
      materialIndicatorBackgroundColor?.toList(),
      materialIndicatorForegroundColor?.toList(),
    ]
  }
}
/// A callback API for native code to call Flutter code.
///
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class NativeTabBarFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  /// Called when the native platform view renders and knows its intrinsic content height.
  func wantsHeight(id idArg: String, height heightArg: Double, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarFlutterApi.wantsHeight", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, heightArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called by the native platform when the user taps a tab.
  func valueChanged(id idArg: String, selectedIndex selectedIndexArg: Int32, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarFlutterApi.valueChanged", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, selectedIndexArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called when the platform code needs the widget state to invalidate and recreate the native view.
  func refresh(id idArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarFlutterApi.refresh", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg] as [Any?]) { _ in
      completion()
    }
  }
}
private class NativeTabBarHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NativeTab.fromList(self.readValue() as! [Any])
      case 129:
        return NativeTabBarApiStyle.fromList(self.readValue() as! [Any])
      case 130:
        return NativeTabIconData.fromList(self.readValue() as! [Any])
      case 131:
        return RGBAColor.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativeTabBarHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeTab {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeTabBarApiStyle {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeTabIconData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? RGBAColor {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeTabBarHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeTabBarHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeTabBarHostApiCodecWriter(data: data)
  }
}

class NativeTabBarHostApiCodec: FlutterStandardMessageCodec {
  static let shared = NativeTabBarHostApiCodec(readerWriter: NativeTabBarHostApiCodecReaderWriter())
}

/// API for our Flutter code to pass data and call methods in native code.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeTabBarHostApi {
  /// Called from Flutter to send the tabs to the native platform code.
  func setTabs(id: String, tabs: [NativeTab], selectedIndex: Int32?) throws -> Bool
  /// Called from Flutter to pass the style to the native code.
  func setStyle(id: String, style: NativeTabBarApiStyle) throws -> Bool
  /// Called from Flutter to tell the native code to select the given tab.
  func setSelected(id: String, index: Int32?) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeTabBarHostApiSetup {
  /// The codec used by NativeTabBarHostApi.
  static var codec: FlutterStandardMessageCodec { NativeTabBarHostApiCodec.shared }
  /// Sets up an instance of `NativeTabBarHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeTabBarHostApi?) {
    /// Called from Flutter to send the tabs to the native platform code.
    let setTabsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarHostApi.setTabs", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setTabsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let tabsArg = args[1] as! [NativeTab]
        let selectedIndexArg = args[2] as? Int32
        do {
          let result = try api.setTabs(id: idArg, tabs: tabsArg, selectedIndex: selectedIndexArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTabsChannel.setMessageHandler(nil)
    }
    /// Called from Flutter to pass the style to the native code.
    let setStyleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarHostApi.setStyle", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setStyleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let styleArg = args[1] as! NativeTabBarApiStyle
        do {
          let result = try api.setStyle(id: idArg, style: styleArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setStyleChannel.setMessageHandler(nil)
    }
    /// Called from Flutter to tell the native code to select the given tab.
    let setSelectedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeTabBarHostApi.setSelected", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSelectedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let indexArg = args[1] as? Int32
        do {
          let result = try api.setSelected(id: idArg, index: indexArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSelectedChannel.setMessageHandler(nil)
    }
  }
}
